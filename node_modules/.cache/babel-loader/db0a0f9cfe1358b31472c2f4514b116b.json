{"ast":null,"code":"var _jsxFileName = \"/workspaces/docker-create-react-app/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Barrier } from './Barrier';\nimport 'App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [barriers, setBarriers] = useState([{\n    id: 1,\n    checked: true\n  }]);\n  const [withH, setWithH] = useState(false);\n  const [H, setH] = useState(0);\n\n  const deleteBarrier = id => {\n    setBarriers(barriers => barriers.filter(barrier => barrier.id !== id));\n  };\n\n  const setP = (id, P) => {\n    setBarriers(barriers => barriers.map(barrier => {\n      if (barrier.id === id) {\n        return Object.assign({}, barrier, {\n          P\n        });\n      } else {\n        return barrier;\n      }\n    }));\n  };\n\n  const setChecked = (id, checked) => {\n    setBarriers(barriers => barriers.map(barrier => {\n      if (barrier.id === id) {\n        return Object.assign({}, barrier, {\n          checked\n        });\n      } else {\n        return barrier;\n      }\n    }));\n  };\n\n  const total = 1 - barriers.reduce((accumulator, barrier) => {\n    if (!barrier.checked) return accumulator;\n    accumulator = accumulator * barrier.P;\n    return accumulator;\n  }, 1);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041A\\u043E\\u043C\\u043F\\u043B\\u0435\\u043A\\u0441 \\u043E\\u0446\\u0435\\u043D\\u043A\\u0438 \\u0437\\u0430\\u0449\\u0438\\u0449\\u0451\\u043D\\u043D\\u043E\\u0441\\u0442\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"authors\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u0420\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0447\\u0438\\u043A\\u0438:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u041E\\u043B\\u0435\\u0439\\u043D\\u0438\\u043A\\u043E\\u0432 \\u0410.\\u041F.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u041C\\u0438\\u0440\\u043E\\u0448\\u043D\\u0438\\u043A \\u0413.\\u041A.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u041F\\u0435\\u0442\\u0440\\u043E\\u0432 \\u0421.\\u0414.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"Barriers\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u0418\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u044C H\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onChange: ({\n          target\n        }) => {\n          setWithH(target.checked);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), withH && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"H = \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: H,\n          onChange: ({\n            target\n          }) => {\n            setH(parseFloat(target.value));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), barriers.map(({\n      id,\n      P,\n      checked\n    }, index) => /*#__PURE__*/_jsxDEV(Barrier, {\n      number: index + 1,\n      remove: () => {\n        deleteBarrier(id);\n      },\n      setP: P => setP(id, P),\n      setChecked: checked => setChecked(id, checked),\n      checked: checked,\n      P: P,\n      withH: withH,\n      H: H\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043F\\u0440\\u0435\\u0433\\u0440\\u0430\\u0434\\u0443\",\n      onClick: () => {\n        setBarriers([...barriers, {\n          id: barriers.length + 1,\n          checked: true\n        }]);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Answers\",\n      children: `Pзащ = ${total || 'Невозможно вычислить'}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"aUq3e5hF/OJVlyWt4FTXo8IMikg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/workspaces/docker-create-react-app/src/App.jsx"],"names":["React","useState","Barrier","App","barriers","setBarriers","id","checked","withH","setWithH","H","setH","deleteBarrier","filter","barrier","setP","P","map","Object","assign","setChecked","total","reduce","accumulator","target","parseFloat","value","index","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport { Barrier } from './Barrier'\nimport 'App.css';\n\nconst App = () => {\n  const [barriers, setBarriers] = useState([{ id: 1, checked: true }])\n  const [withH, setWithH] = useState(false)\n  const [H, setH] = useState(0)\n\n  const deleteBarrier = (id) => {\n    setBarriers(barriers => barriers.filter(barrier => barrier.id !== id))\n  }\n  const setP = (id, P) => {\n    setBarriers(barriers => barriers.map(barrier => {\n      if (barrier.id === id) {\n        return Object.assign({}, barrier, { P })\n      } else {\n        return barrier\n      }\n    }))\n  }\n\n  const setChecked = (id, checked) => {\n    setBarriers(barriers => barriers.map(barrier => {\n      if (barrier.id === id) {\n        return Object.assign({}, barrier, { checked })\n      } else {\n        return barrier\n      }\n    }))\n  }\n\n  const total = 1 - barriers.reduce((accumulator, barrier) => {\n    if (!barrier.checked) return accumulator\n    accumulator = accumulator * barrier.P\n    return accumulator\n  }, 1)\n\n  return (\n    <div>\n      <h1>Комплекс оценки защищённости</h1>\n      <div className='authors'>\n        <span>Разработчики:</span>\n        <span>Олейников А.П.</span>\n        <span>Мирошник Г.К.</span>\n        <span>Петров С.Д.</span>\n      </div>\n      <hr />\n      <span className='Barriers'>\n        <span>Использовать H</span>\n        <input\n          type='checkbox'\n          onChange={({ target }) => { setWithH(target.checked) }}\n        />\n        {withH &&\n          <>\n            <span>H = </span>\n            <input\n              type='number'\n              value={H}\n              onChange={({ target }) => { setH(parseFloat(target.value)) }}\n            />\n          </>\n        }\n      </span>\n      {barriers.map(({ id, P, checked }, index) => (\n        <Barrier\n          key={id}\n          number={index + 1}\n          remove={() => { deleteBarrier(id) }}\n          setP={(P) => setP(id, P)}\n          setChecked={(checked) => setChecked(id, checked)}\n          checked={checked}\n          P={P}\n          withH={withH}\n          H={H}\n        />\n      ))\n      }\n      <input\n        type='button'\n        value='Добавить преграду'\n        onClick={() => {\n          setBarriers([...barriers, { id: barriers.length + 1, checked: true }])\n        }}\n      />\n      <div className='Answers'>{`Pзащ = ${total || 'Невозможно вычислить'}`\n      }\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}